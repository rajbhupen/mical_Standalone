/*****************************************************************************************
 **    Interpolate a given function in multidimensional parameter space using a         **
 **    polynomial of given order. The FORTRAN version of this code was develpoed in     **
 **    EHEP,TIFR. And the C++ version is modified by Sumanta Pal(INO Graduate Student)  **
 **    F2int(NPAR,NDEG,G[],NDATA[],ARRAY[],FVAL[])                                      **
 **    NPAR-> No of Parameters.                                                         **
 **    NDEG-> Degree of the Polynomial used                                             **
 **    G-> Real Onedimensional Array. Interpolating points are stored here.             **
 **    NDATA-> Integer Onedimensional Array.Stores no of data points for each parameter **
 **    ARRAy-> Real Onedimensional Array. Parameter values are stored in the order of   **
 **            parameters.(all values of parameter1, then for parameter2, .....etc.).   **
 **            Parameters should be in increasing order.                                **
 **    FAVL->  Double Onedimensional Array. Functional values are stored in a matrix    **
 **            form with an ordering such that the 1st parameter values change fastest  **
 **            and that of NPAR'th parameter values change slowest. So keeping row fixed**
 **            it will first vary column-wise and then it will increment the row.       **
 **    Called by User.                                                                  **
 *****************************************************************************************/
#ifndef F2int_h
#define F2int_h
#include "Locate.h"
#include "FindIndex.h"
#include "Polint.h"
#include<iostream> 
#include<cstdio>
#include<cmath>
/* #include "MultiSimAnalysis.hh" */
#include "FieldPropagator.hh"
using namespace std;
#define polint 0

double F2int( bool Bfield,int npar,int ndeg,int ag[],int ndata[], double& f2int) //130811 changed ag[]&pFieldMap->array1[slot][] to float 4m double
{
  FieldPropagator * pFieldMap = FieldPropagator::FdPointer;
  if(pFieldMap==NULL)cout<<"ERRRRRRR"<<endl;
  int val1,val2,temp; //locate
    //int nmax1=11,nmax2=10000;
  //    int npow, k, i,ix,iv,ip,ist[11],ind[11],ntot;
  int npow,ntot,k,i,ix,iv,ip,ist[11],ind[11];
  double fgrid[11],pgrid[11],fsav[10000],polval;
  
  double g1[2];
  //  bool printing = false;
  f2int = 0.0;
  int modulesize=16000;
  int slotsize =4000;
  //  int slotysize =4000;
  int stepsize =50;
  //  int stepysize =100;
  
  int temp_ix1=0, temp_ix2=0, temp_o_ix1=0;
  if(ndeg<1){ // Under this condition no interpolation
    f2int=-999999;
    for(i=0;i<npar;i++){
      if(ndata[i]<ndeg){
	f2int=-999998;
      }
    }
  }else{ // Otherwise Procede
    //Find the starting value of grids
    npow = 1;
    ntot = 0;
    k = 0;
    temp = -ndata[0];
    
    int slot;
    slot=((int)(ag[1]/slotsize))*4+(int)(ag[0]/slotsize); //AAR,SP:new addition
    
    if(ag[0]!=modulesize&&ag[1]!=modulesize){slot=slot;}
    //   else if(ag[0]*1000==modulesize&&ag[1]==modulesize){slot=slot-5;}
    if(ag[0]==modulesize){ slot=slot-1;} //AAR,SP:new addition
    if(ag[1]==modulesize){  slot=slot-4;} //AAR,SP:new addition
    
    temp_ix1=0, temp_ix2=0, temp_o_ix1=0;
    for(i=0;i<npar;i++){ 
      temp_ix1=-1;temp_ix2=-1;
      ix=-1;
      if(ag[i]!=modulesize){
	ix = (int)(ag[i]%slotsize/stepsize);
	if(ag[i]%stepsize==0 ) ix = ix-1 ;
      } else { 
	ix = (int)((ag[i]-stepsize)%slotsize/stepsize);
      }
      //if polit function is defined
      if(polint){
	ix= ix - (ndeg+1)/2 +1 ;
	if(ix< 0) ix=0;
	else if(ix>=ndata[i]-(ndeg+1)){
	  ix= ndata[i]-(ndeg+1);
	}
      } else{ // else if bilinear  interpolation function is defined
	if(ix< 0) ix=0;
	else if(ix>=ndata[i]-1){
	  ix= ndata[i]-1;
	}
      }
      /* ix=-1;
	 Locate(pFieldMap->array1[slot],ndata[i],ag[i],i,ndata[0],ix);
      */
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ind[i]=ix; //cout<<"11. changed ix  "<<ix<<endl;
      ist[i]=ind[i];
      k = k+ndata[i];
      g1[i]=(double)ag[i]/1000;
      npow = npow * (ndeg+1); //cout<<i<<"    "<<npow<<endl;
    }
    
    if(polint){//if polint function is defined this will do the interpolation
      
      for(ip=0;ip<npar;ip++){ // ip=0 will do along X axis all interpolations & ip=1 will do final interpolation along Y
	ix = -1; iv = -1;
	for(i=0;i<npow;i++){// for ip=1, this will run from 0 to (ndeg+1)
	  ix = ix+1;
	  if(ix==0)  ist[0]=ind[0];
	  if(iv==-1&&ix==0) ist[1]=ind[1];
	  findex(npar,ndata,ist,ip,val1,val2);
	  pgrid[ix]=pFieldMap->array1[slot][val1];
	  if(ip==0){
	    if(Bfield==0){fgrid[ix]= pFieldMap->fvalx1[slot][val2]; }
	    else if(Bfield==1){ fgrid[ix]=pFieldMap->fvaly1[slot][val2];}
	    if(ix==1 &&iv==0){
	      //pAnalysis->ascii_output<<" "<<fgrid[ix]*tesla;
	      ip=0;
	    }
	  } else {
	    fgrid[ix]=fsav[i];
	  }
	  
	  if(ip==0) { 
	    ist[0]=ist[0]+1; 
	  } else if(ip==1){ 
	    ist[1]=ist[1]+1; 
	  }
	  if(ix==ndeg || (ip==1&& ix==ndeg ) ){
	    ix=-1; // reinitialization for next interpolation
	    iv = iv+1;
	    
	    Polint(fgrid,pgrid,ndeg+1,g1[ip],polval);
	    
	    fsav[iv]=polval;
	    if(ip==0) ist[0]=ind[0];
	    ist[1]=ist[1]+1;
	  } 
	}       //polynomial loop
	npow = npow/(ndeg+1); //decreased to do only final interpolation
      }//ip loop finished
      f2int = fsav[0]; //final interpolation value passed
    } else { //if polint =0, interpolation is done using bilinear interpolation.
      ip=0;
      for(int ii=0;ii<4;ii++){
	if(ii==1){ist[0]=ind[0]+1;}
	if(ii==2){ist[0]=ind[0];ist[1]=ind[1]+1;}
	if(ii==3){ist[0]=ind[0]+1;}
	
	findex(npar,ndata,ist,ip,val1,val2);
	
	if(ii==0)  pgrid[0]=pFieldMap->array1[slot][val1];
	if(ii==1)  pgrid[1]=pFieldMap->array1[slot][val1];
	if(Bfield==0){ fgrid[ii]= pFieldMap->fvalx1[slot][val2];}
	else if(Bfield==1){ fgrid[ii]=pFieldMap->fvaly1[slot][val2];}
	if(ii==1) {
	  ip=1; findex(npar,ndata,ist,ip,val1,val2);
	  pgrid[2]=pFieldMap->array1[slot][val1]; ip=0;
	} if(ii==3) {
	  ip=1; findex(npar,ndata,ist,ip,val1,val2);
	  pgrid[ii]=pFieldMap->array1[slot][val1]; ip=0;
	}
      }
      f2int = bilinearInterpolation(fgrid,pgrid,ag);
    }
  } // main 'else' condition over
  
  
  if (abs(f2int)< 3 && abs(f2int) >0) {
    return f2int;
  } else {
    cout<<"nan  : "<< ag[0]<<" "<<ag[1] <<" "<< f2int<<endl;
    return 0;
  }
}//F2int definition ends

#endif

